DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createUser", rawQueryString = "?password=654321&first_name=Kate&last_name=Grick&user_pic_url=https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress%26cs=tinysrgb%26dpr=2%26h=650%26w=940", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40472, pathInfo = ["createUser"], queryString = [("password",Just "654321"),("first_name",Just "Kate"),("last_name",Just "Grick"),("user_pic_url",Just "https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create user command
INFO: All parameters parsed
DEBUG: DB return user_id2
INFO: User_id: 2 created
DEBUG: Output response: "{\"user_id\":2,\"first_name\":\"Kate\",\"last_name\":\"Grick\",\"user_pic_id\":2,\"user_pic_url\":\"http://localhost:3000/picture/2\",\"user_create_date\":\"2021-02-16\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createUser", rawQueryString = "?password=654321&first_name=Rick&last_name=Stam&user_pic_url=https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress%26cs=tinysrgb%26dpr=2%26h=650%26w=940", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40482, pathInfo = ["createUser"], queryString = [("password",Just "654321"),("first_name",Just "Rick"),("last_name",Just "Stam"),("user_pic_url",Just "https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create user command
INFO: All parameters parsed
DEBUG: DB return user_id3
INFO: User_id: 3 created
DEBUG: Output response: "{\"user_id\":3,\"first_name\":\"Rick\",\"last_name\":\"Stam\",\"user_pic_id\":3,\"user_pic_url\":\"http://localhost:3000/picture/3\",\"user_create_date\":\"2021-02-16\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createUser", rawQueryString = "?password=654321&first_name=Luck&last_name=Smith&user_pic_url=https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress%26cs=tinysrgb%26dpr=2%26h=650%26w=940", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40486, pathInfo = ["createUser"], queryString = [("password",Just "654321"),("first_name",Just "Luck"),("last_name",Just "Smith"),("user_pic_url",Just "https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create user command
INFO: All parameters parsed
DEBUG: DB return user_id4
INFO: User_id: 4 created
DEBUG: Output response: "{\"user_id\":4,\"first_name\":\"Luck\",\"last_name\":\"Smith\",\"user_pic_id\":4,\"user_pic_url\":\"http://localhost:3000/picture/4\",\"user_create_date\":\"2021-02-16\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createAdmin", rawQueryString = "?password=654321&first_name=Chris&last_name=Wirt&user_pic_url=https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress%26cs=tinysrgb%26dpr=2%26h=650%26w=940&create_admin_key=lola", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40490, pathInfo = ["createAdmin"], queryString = [("password",Just "654321"),("first_name",Just "Chris"),("last_name",Just "Wirt"),("user_pic_url",Just "https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940"),("create_admin_key",Just "lola")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create admin command
DEBUG: Select data from DB. Table: key
INFO: Data received from DB
DEBUG: DB return user_id5
INFO: User_id: 5 created as admin
DEBUG: Output response: "{\"user_id\":5,\"first_name\":\"Chris\",\"last_name\":\"Wirt\",\"user_pic_id\":5,\"user_pic_url\":\"http://localhost:3000/picture/5\",\"user_create_date\":\"2021-02-16\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createAdmin", rawQueryString = "?password=654321&first_name=Poll&last_name=Leon&user_pic_url=https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress%26cs=tinysrgb%26dpr=2%26h=650%26w=940&create_admin_key=lola", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40494, pathInfo = ["createAdmin"], queryString = [("password",Just "654321"),("first_name",Just "Poll"),("last_name",Just "Leon"),("user_pic_url",Just "https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940"),("create_admin_key",Just "lola")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create admin command
DEBUG: Select data from DB. Table: key
INFO: Data received from DB
DEBUG: DB return user_id6
INFO: User_id: 6 created as admin
DEBUG: Output response: "{\"user_id\":6,\"first_name\":\"Poll\",\"last_name\":\"Leon\",\"user_pic_id\":6,\"user_pic_url\":\"http://localhost:3000/picture/6\",\"user_create_date\":\"2021-02-16\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createAdmin", rawQueryString = "?password=654321&first_name=Vick&last_name=Autris&user_pic_url=https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress%26cs=tinysrgb%26dpr=2%26h=650%26w=940&create_admin_key=lola", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40498, pathInfo = ["createAdmin"], queryString = [("password",Just "654321"),("first_name",Just "Vick"),("last_name",Just "Autris"),("user_pic_url",Just "https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940"),("create_admin_key",Just "lola")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create admin command
DEBUG: Select data from DB. Table: key
INFO: Data received from DB
DEBUG: DB return user_id7
INFO: User_id: 7 created as admin
DEBUG: Output response: "{\"user_id\":7,\"first_name\":\"Vick\",\"last_name\":\"Autris\",\"user_pic_id\":7,\"user_pic_url\":\"http://localhost:3000/picture/7\",\"user_create_date\":\"2021-02-16\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createAdmin", rawQueryString = "?password=654321&first_name=Tom&last_name=Ester&user_pic_url=https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress%26cs=tinysrgb%26dpr=2%26h=650%26w=940&create_admin_key=lola", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40502, pathInfo = ["createAdmin"], queryString = [("password",Just "654321"),("first_name",Just "Tom"),("last_name",Just "Ester"),("user_pic_url",Just "https://images.pexels.com/photos/4617160/pexels-photo-4617160.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940"),("create_admin_key",Just "lola")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create admin command
DEBUG: Select data from DB. Table: key
INFO: Data received from DB
DEBUG: DB return user_id8
INFO: User_id: 8 created as admin
DEBUG: Output response: "{\"user_id\":8,\"first_name\":\"Tom\",\"last_name\":\"Ester\",\"user_pic_id\":8,\"user_pic_url\":\"http://localhost:3000/picture/8\",\"user_create_date\":\"2021-02-16\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createAuthor", rawQueryString = "?user_id=2&author_info=SuperAuthor&admin_id=6&password=654321", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40506, pathInfo = ["createAuthor"], queryString = [("user_id",Just "2"),("author_info",Just "SuperAuthor"),("admin_id",Just "6"),("password",Just "654321")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create author command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) doesn`t exist
DEBUG: DB return author_id2
INFO: Author_id: 2 created
DEBUG: Output response: "{\"author_id\":2,\"user_id\":2,\"author_info\":\"SuperAuthor\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createAuthor", rawQueryString = "?user_id=3&author_info=Demon&admin_id=6&password=654321", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40510, pathInfo = ["createAuthor"], queryString = [("user_id",Just "3"),("author_info",Just "Demon"),("admin_id",Just "6"),("password",Just "654321")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create author command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) doesn`t exist
DEBUG: DB return author_id3
INFO: Author_id: 3 created
DEBUG: Output response: "{\"author_id\":3,\"user_id\":3,\"author_info\":\"Demon\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createAuthor", rawQueryString = "?user_id=4&author_info=Tall&admin_id=6&password=654321", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40514, pathInfo = ["createAuthor"], queryString = [("user_id",Just "4"),("author_info",Just "Tall"),("admin_id",Just "6"),("password",Just "654321")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create author command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) doesn`t exist
DEBUG: DB return author_id4
INFO: Author_id: 4 created
DEBUG: Output response: "{\"author_id\":4,\"user_id\":4,\"author_info\":\"Tall\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createCategory", rawQueryString = "?password=654321&admin_id=6&category_name=Hobby", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40518, pathInfo = ["createCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "Hobby")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":2,\"category_name\":\"Hobby\",\"super_category\":\"NULL\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createCategory", rawQueryString = "?password=654321&admin_id=6&category_name=Work", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40522, pathInfo = ["createCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "Work")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":3,\"category_name\":\"Work\",\"super_category\":\"NULL\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createCategory", rawQueryString = "?password=654321&admin_id=6&category_name=Love", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40526, pathInfo = ["createCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "Love")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":4,\"category_name\":\"Love\",\"super_category\":\"NULL\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createSubCategory", rawQueryString = "?password=654321&admin_id=6&category_name=Sport&super_category_id=2", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40530, pathInfo = ["createSubCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "Sport"),("super_category_id",Just "2")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create sub category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":5,\"category_name\":\"Sport\",\"super_category\":{\"category_id\":2,\"category_name\":\"Hobby\",\"super_category\":\"NULL\"}}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createSubCategory", rawQueryString = "?password=654321&admin_id=6&category_name=Art&super_category_id=2", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40534, pathInfo = ["createSubCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "Art"),("super_category_id",Just "2")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create sub category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":6,\"category_name\":\"Art\",\"super_category\":{\"category_id\":2,\"category_name\":\"Hobby\",\"super_category\":\"NULL\"}}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createSubCategory", rawQueryString = "?password=654321&admin_id=6&category_name=Bake&super_category_id=2", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40538, pathInfo = ["createSubCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "Bake"),("super_category_id",Just "2")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create sub category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":7,\"category_name\":\"Bake\",\"super_category\":{\"category_id\":2,\"category_name\":\"Hobby\",\"super_category\":\"NULL\"}}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createSubCategory", rawQueryString = "?password=654321&admin_id=6&category_name=Teacher&super_category_id=3", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40542, pathInfo = ["createSubCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "Teacher"),("super_category_id",Just "3")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create sub category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":8,\"category_name\":\"Teacher\",\"super_category\":{\"category_id\":3,\"category_name\":\"Work\",\"super_category\":\"NULL\"}}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createSubCategory", rawQueryString = "?password=654321&admin_id=6&category_name=Football&super_category_id=5", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40546, pathInfo = ["createSubCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "Football"),("super_category_id",Just "5")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create sub category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":9,\"category_name\":\"Football\",\"super_category\":{\"category_id\":5,\"category_name\":\"Sport\",\"super_category\":{\"category_id\":2,\"category_name\":\"Hobby\",\"super_category\":\"NULL\"}}}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createSubCategory", rawQueryString = "?password=654321&admin_id=6&category_name=Tennis&super_category_id=5", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40550, pathInfo = ["createSubCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "Tennis"),("super_category_id",Just "5")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create sub category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":10,\"category_name\":\"Tennis\",\"super_category\":{\"category_id\":5,\"category_name\":\"Sport\",\"super_category\":{\"category_id\":2,\"category_name\":\"Hobby\",\"super_category\":\"NULL\"}}}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createSubCategory", rawQueryString = "?password=654321&admin_id=6&category_name=KinderGardenTeacher&super_category_id=8", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40554, pathInfo = ["createSubCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "KinderGardenTeacher"),("super_category_id",Just "8")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create sub category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":11,\"category_name\":\"KinderGardenTeacher\",\"super_category\":{\"category_id\":8,\"category_name\":\"Teacher\",\"super_category\":{\"category_id\":3,\"category_name\":\"Work\",\"super_category\":\"NULL\"}}}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createSubCategory", rawQueryString = "?password=654321&admin_id=6&category_name=BigTennis&super_category_id=10", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40558, pathInfo = ["createSubCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "BigTennis"),("super_category_id",Just "10")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create sub category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":12,\"category_name\":\"BigTennis\",\"super_category\":{\"category_id\":10,\"category_name\":\"Tennis\",\"super_category\":{\"category_id\":5,\"category_name\":\"Sport\",\"super_category\":{\"category_id\":2,\"category_name\":\"Hobby\",\"super_category\":\"NULL\"}}}}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createSubCategory", rawQueryString = "?password=654321&admin_id=6&category_name=PingPong&super_category_id=10", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40562, pathInfo = ["createSubCategory"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("category_name",Just "PingPong"),("super_category_id",Just "10")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create sub category command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"category_id\":13,\"category_name\":\"PingPong\",\"super_category\":{\"category_id\":10,\"category_name\":\"Tennis\",\"super_category\":{\"category_id\":5,\"category_name\":\"Sport\",\"super_category\":{\"category_id\":2,\"category_name\":\"Hobby\",\"super_category\":\"NULL\"}}}}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createTag", rawQueryString = "?password=654321&admin_id=6&tag_name=Sport", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40566, pathInfo = ["createTag"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("tag_name",Just "Sport")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create tag command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Output response: "{\"tag_id\":1,\"tag_name\":\"Sport\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createTag", rawQueryString = "?password=654321&admin_id=6&tag_name=Love", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40570, pathInfo = ["createTag"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("tag_name",Just "Love")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create tag command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Output response: "{\"tag_id\":2,\"tag_name\":\"Love\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createTag", rawQueryString = "?password=654321&admin_id=6&tag_name=Cats", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40574, pathInfo = ["createTag"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("tag_name",Just "Cats")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create tag command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Output response: "{\"tag_id\":3,\"tag_name\":\"Cats\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createTag", rawQueryString = "?password=654321&admin_id=6&tag_name=Dogs", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40578, pathInfo = ["createTag"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("tag_name",Just "Dogs")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create tag command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Output response: "{\"tag_id\":4,\"tag_name\":\"Dogs\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createTag", rawQueryString = "?password=654321&admin_id=6&tag_name=Auto", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40582, pathInfo = ["createTag"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("tag_name",Just "Auto")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create tag command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Output response: "{\"tag_id\":5,\"tag_name\":\"Auto\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createTag", rawQueryString = "?password=654321&admin_id=6&tag_name=Kitchen", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40586, pathInfo = ["createTag"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("tag_name",Just "Kitchen")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create tag command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Output response: "{\"tag_id\":6,\"tag_name\":\"Kitchen\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/createTag", rawQueryString = "?password=654321&admin_id=6&tag_name=Home", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40590, pathInfo = ["createTag"], queryString = [("password",Just "654321"),("admin_id",Just "6"),("tag_name",Just "Home")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create tag command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Output response: "{\"tag_id\":7,\"tag_name\":\"Home\"}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "POST", httpVersion = HTTP/1.1, rawPathInfo = "/createNewDraft", rawQueryString = "", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*"),("Content-Type","application/json"),("Content-Length","849")], isSecure = False, remoteHost = 127.0.0.1:40594, pathInfo = ["createNewDraft"], queryString = [], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 849, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create new draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Select data from DB. Table: authors
INFO: Data received from DB
WARNING: SimpleError "Invalid picture url:https://cdn.pixabay.com/photo/2019/03/20/23/03/florence-4069756_960_720.jpg"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "POST", httpVersion = HTTP/1.1, rawPathInfo = "/createNewDraft", rawQueryString = "", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*"),("Content-Type","application/json"),("Content-Length","1145"),("Expect","100-continue")], isSecure = False, remoteHost = 127.0.0.1:40600, pathInfo = ["createNewDraft"], queryString = [], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 1145, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create new draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Select data from DB. Table: authors
INFO: Data received from DB
WARNING: SimpleError "Invalid picture url:https://cdn.pixabay.com/photo/2019/03/20/23/03/florence-4069756_960_720.jpg"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "POST", httpVersion = HTTP/1.1, rawPathInfo = "/createNewDraft", rawQueryString = "", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*"),("Content-Type","application/json"),("Content-Length","556")], isSecure = False, remoteHost = 127.0.0.1:40604, pathInfo = ["createNewDraft"], queryString = [], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 556, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create new draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Select data from DB. Table: authors
INFO: Data received from DB
WARNING: SimpleError "Invalid picture url:https://cdn.pixabay.com/photo/2019/03/20/23/03/florence-4069756_960_720.jpg"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "POST", httpVersion = HTTP/1.1, rawPathInfo = "/createNewDraft", rawQueryString = "", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*"),("Content-Type","application/json"),("Content-Length","772")], isSecure = False, remoteHost = 127.0.0.1:40608, pathInfo = ["createNewDraft"], queryString = [], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 772, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Create new draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (category_id) in the DB
INFO: Entity (category_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Checking existence entity (tag_id) in the DB
INFO: Entity (tag_id) exist
DEBUG: Select data from DB. Table: authors
INFO: Data received from DB
DEBUG: Select data from DB. Table: tags
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"draft_id\":1,\"post_id\":\"NULL\",\"author\":{\"author_id\":2,\"user_id\":2,\"author_info\":\"SuperAuthor\"},\"draft_name\":\"rock\",\"draft_category\":{\"category_id\":8,\"category_name\":\"Teacher\",\"super_category\":{\"category_id\":3,\"category_name\":\"Work\",\"super_category\":\"NULL\"}},\"draft_text\":\"heyhey\",\"draft_main_pic_id\":19,\"draft_main_pic_url\":\"http://localhost:3000/picture/19\",\"draft_pics\":[{\"pic_id\":20,\"pic_url\":\"http://localhost:3000/picture/20\"},{\"pic_id\":21,\"pic_url\":\"http://localhost:3000/picture/21\"},{\"pic_id\":22,\"pic_url\":\"http://localhost:3000/picture/22\"},{\"pic_id\":23,\"pic_url\":\"http://localhost:3000/picture/23\"}],\"draft_tags\":[{\"tag_id\":1,\"tag_name\":\"Sport\"},{\"tag_id\":3,\"tag_name\":\"Cats\"},{\"tag_id\":4,\"tag_name\":\"Dogs\"},{\"tag_id\":7,\"tag_name\":\"Home\"}]}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/publishDraft", rawQueryString = "?user_id=2&password=654321&draft_id=1", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40612, pathInfo = ["publishDraft"], queryString = [("user_id",Just "2"),("password",Just "654321"),("draft_id",Just "1")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Publish draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (draft_id) in the DB
INFO: Entity (draft_id) exist
DEBUG: Select data from DB. Table: drafts
INFO: Data received from DB
DEBUG: Select data from DB. Table: authors
INFO: Data received from DB
DEBUG: Select data from DB. Table: drafts
INFO: Data received from DB
DEBUG: Select data from DB. Table: drafts AS d JOIN authors AS a ON d.author_id=a.author_id
INFO: Data received from DB
DEBUG: Select data from DB. Table: draftspics
INFO: Data received from DB
DEBUG: Select data from DB. Table: draftstags AS dt JOIN tags ON dt.tag_id=tags.tag_id
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"post_id\":1,\"author\":{\"author_id\":2,\"user_id\":2,\"author_info\":\"SuperAuthor\"},\"post_name\":\"rock\",\"post_create_date\":\"2021-02-16\",\"post_category\":{\"category_id\":8,\"category_name\":\"Teacher\",\"super_category\":{\"category_id\":3,\"category_name\":\"Work\",\"super_category\":\"NULL\"}},\"post_text\":\"heyhey\",\"post_main_pic_id\":19,\"post_main_pic_url\":\"http://localhost:3000/picture/19\",\"post_pics\":[{\"pic_id\":20,\"pic_url\":\"http://localhost:3000/picture/20\"},{\"pic_id\":21,\"pic_url\":\"http://localhost:3000/picture/21\"},{\"pic_id\":22,\"pic_url\":\"http://localhost:3000/picture/22\"},{\"pic_id\":23,\"pic_url\":\"http://localhost:3000/picture/23\"}],\"post_tags\":[{\"tag_id\":1,\"tag_name\":\"Sport\"},{\"tag_id\":3,\"tag_name\":\"Cats\"},{\"tag_id\":4,\"tag_name\":\"Dogs\"},{\"tag_id\":7,\"tag_name\":\"Home\"}]}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/publishDraft", rawQueryString = "?user_id=3&password=654321&draft_id=2", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40616, pathInfo = ["publishDraft"], queryString = [("user_id",Just "3"),("password",Just "654321"),("draft_id",Just "2")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Publish draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (draft_id) in the DB
WARNING: SimpleError "draft_id: 2 doesn`t exist."
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/publishDraft", rawQueryString = "?user_id=4&password=654321&draft_id=3", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40620, pathInfo = ["publishDraft"], queryString = [("user_id",Just "4"),("password",Just "654321"),("draft_id",Just "3")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Publish draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (draft_id) in the DB
WARNING: SimpleError "draft_id: 3 doesn`t exist."
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/publishDraft", rawQueryString = "?user_id=2&password=654321&draft_id=4", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40624, pathInfo = ["publishDraft"], queryString = [("user_id",Just "2"),("password",Just "654321"),("draft_id",Just "4")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Publish draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (draft_id) in the DB
WARNING: SimpleError "draft_id: 4 doesn`t exist."
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/publishDraft", rawQueryString = "?user_id=2&password=654321&draft_id=1", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40628, pathInfo = ["publishDraft"], queryString = [("user_id",Just "2"),("password",Just "654321"),("draft_id",Just "1")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Publish draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (draft_id) in the DB
INFO: Entity (draft_id) exist
DEBUG: Select data from DB. Table: drafts
INFO: Data received from DB
DEBUG: Select data from DB. Table: authors
INFO: Data received from DB
DEBUG: Select data from DB. Table: drafts
INFO: Data received from DB
DEBUG: Select data from DB. Table: drafts AS d JOIN authors AS a ON d.author_id=a.author_id
INFO: Data received from DB
DEBUG: Select data from DB. Table: draftspics
INFO: Data received from DB
DEBUG: Select data from DB. Table: draftstags AS dt JOIN tags ON dt.tag_id=tags.tag_id
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Select data from DB. Table: categories
INFO: Data received from DB
DEBUG: Output response: "{\"post_id\":2,\"author\":{\"author_id\":2,\"user_id\":2,\"author_info\":\"SuperAuthor\"},\"post_name\":\"rock\",\"post_create_date\":\"2021-02-16\",\"post_category\":{\"category_id\":8,\"category_name\":\"Teacher\",\"super_category\":{\"category_id\":3,\"category_name\":\"Work\",\"super_category\":\"NULL\"}},\"post_text\":\"heyhey\",\"post_main_pic_id\":19,\"post_main_pic_url\":\"http://localhost:3000/picture/19\",\"post_pics\":[{\"pic_id\":20,\"pic_url\":\"http://localhost:3000/picture/20\"},{\"pic_id\":21,\"pic_url\":\"http://localhost:3000/picture/21\"},{\"pic_id\":22,\"pic_url\":\"http://localhost:3000/picture/22\"},{\"pic_id\":23,\"pic_url\":\"http://localhost:3000/picture/23\"}],\"post_tags\":[{\"tag_id\":1,\"tag_name\":\"Sport\"},{\"tag_id\":3,\"tag_name\":\"Cats\"},{\"tag_id\":4,\"tag_name\":\"Dogs\"},{\"tag_id\":7,\"tag_name\":\"Home\"}]}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/publishDraft", rawQueryString = "?user_id=3&password=654321&draft_id=2", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40632, pathInfo = ["publishDraft"], queryString = [("user_id",Just "3"),("password",Just "654321"),("draft_id",Just "2")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Publish draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (draft_id) in the DB
WARNING: SimpleError "draft_id: 2 doesn`t exist."
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/publishDraft", rawQueryString = "?user_id=4&password=654321&draft_id=3", requestHeaders = [("Host","localhost:3000"),("User-Agent","curl/7.68.0"),("Accept","*/*")], isSecure = False, remoteHost = 127.0.0.1:40636, pathInfo = ["publishDraft"], queryString = [("user_id",Just "4"),("password",Just "654321"),("draft_id",Just "3")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Publish draft command
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (draft_id) in the DB
WARNING: SimpleError "draft_id: 3 doesn`t exist."
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/deleteUser", rawQueryString = "?user_id=4&admin_id=6&password=654321", requestHeaders = [("User-Agent","PostmanRuntime/7.26.8"),("Accept","*/*"),("Postman-Token","682edd9d-70a5-4ac8-9544-45f65eaf79b3"),("Host","localhost:3000"),("Accept-Encoding","gzip, deflate, br"),("Connection","keep-alive"),("Content-Type","multipart/form-data; boundary=--------------------------894768194419500962344500"),("Content-Length","170")], isSecure = False, remoteHost = 127.0.0.1:40646, pathInfo = ["deleteUser"], queryString = [("user_id",Just "4"),("admin_id",Just "6"),("password",Just "654321")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 170, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Delete user command
INFO: All authorize parameters parsed
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: authors
INFO: Data received from DB
DEBUG: Select data from DB. Table: drafts
INFO: Data received from DB
INFO: User_id: 4 deleted
DEBUG: Output response: "{\"ok\":true}"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/deleteUser", rawQueryString = "?user_id=4&admin_id=6&password=654321", requestHeaders = [("User-Agent","PostmanRuntime/7.26.8"),("Accept","*/*"),("Postman-Token","688a45ea-836e-4791-ab49-b8a7abb0922d"),("Host","localhost:3000"),("Accept-Encoding","gzip, deflate, br"),("Connection","keep-alive"),("Content-Type","multipart/form-data; boundary=--------------------------637905171587175930757677"),("Content-Length","170")], isSecure = False, remoteHost = 127.0.0.1:40646, pathInfo = ["deleteUser"], queryString = [("user_id",Just "4"),("admin_id",Just "6"),("password",Just "654321")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 170, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Delete user command
INFO: All authorize parameters parsed
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
DEBUG: Checking existence entity (user_id) in the DB
WARNING: SimpleError "user_id: 4 doesn`t exist."
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/deleteUser", rawQueryString = "?user_id=2&admin_id=2&password=654321", requestHeaders = [("User-Agent","PostmanRuntime/7.26.8"),("Accept","*/*"),("Postman-Token","12bc5373-ac2e-4724-90f8-fef29993e347"),("Host","localhost:3000"),("Accept-Encoding","gzip, deflate, br"),("Connection","keep-alive"),("Content-Type","multipart/form-data; boundary=--------------------------574698883476889859513933"),("Content-Length","170")], isSecure = False, remoteHost = 127.0.0.1:40646, pathInfo = ["deleteUser"], queryString = [("user_id",Just "2"),("admin_id",Just "2"),("password",Just "654321")], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 170, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Delete user command
INFO: All authorize parameters parsed
DEBUG: Checking existence entity (user_id) in the DB
INFO: Entity (user_id) exist
DEBUG: Select data from DB. Table: users
INFO: Data received from DB
WARNING: SecretError "valid pwd, user is NOT admin"
DEBUG: Connect to DB
DEBUG: Incoming request: Request {requestMethod = "GET", httpVersion = HTTP/1.1, rawPathInfo = "/picture/24", rawQueryString = "", requestHeaders = [("User-Agent","PostmanRuntime/7.26.8"),("Accept","*/*"),("Postman-Token","728c0e9e-1e6b-49cf-9b7c-fec5735c8dfd"),("Host","localhost:3000"),("Accept-Encoding","gzip, deflate, br"),("Connection","keep-alive")], isSecure = False, remoteHost = 127.0.0.1:40702, pathInfo = ["picture","24"], queryString = [], requestBody = <IO ByteString>, vault = <Vault>, requestBodyLength = KnownLength 0, requestHeaderHost = Just "localhost:3000", requestHeaderRange = Nothing}
INFO: Picture command
DEBUG: Checking existence entity (pic_id) in the DB
INFO: Entity (pic_id) exist
DEBUG: Select data from DB. Table: pics
INFO: Data received from DB
INFO: Getting picture from internet. Url:ftt
